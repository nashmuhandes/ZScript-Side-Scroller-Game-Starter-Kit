enum EDirection
{
	DIR_Left,
	DIR_Right
}

const ANGLE_Left = 180.;
const ANGLE_Right = 0.;

class SideScrollerPlayer : DoomPlayer
{
	Default
	{
		Player.SideMove PLAYER_MOVE_SPEED;
		SideScrollerPlayer.SpriteSize PLAYER_SPRITE_SCALE;
		Height PLAYER_HEIGHT;
	}

	// camera actor
	Actor sideCam;

	// the player's direction
	bool dir;

	double vx;
	double j;
	bool jumping, falling;
	int oldState;
	int spriteSize;
	property SpriteSize: spriteSize;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	bool bIsOnFloor (void)
	{
		return Pos.Z == FloorZ || Vel.Z == 0 && bOnMObj;
	}

	double GetMoveSpeed (void)
	{
		return Vel.Length();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SetupSideScrollerCamera(void)
	{
		// spawn camera
		sideCam = Spawn("SideScrollerCamera", Pos, NO_REPLACE);

		if (sideCam)
		{
			// tell the camera to track this player
			SideScrollerCamera(sideCam).track = self;

			// change view to the camera
			SetCamera(sideCam, false);
		}
		else
		{
			Console.Printf("WARNING: Failed to spawn the camera!");
		}
	}

	void DestroyCamera(void)
	{
		if (sideCam)
		{
			sideCam.Destroy();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void MoveSideScrollerPlayer(void)
	{
		// LEFT/RIGHT MOVEMENT /////////////////////////////////////////////////

		double sideInput = GetPlayerInput(INPUT_SIDEMOVE);
		double normalizedSideInput;

		/*
		// You can use the following formula for analog player movement
		// I have analog movement disabled on purpose
		double normalizedInput = SideMove1 * sideInput / 10240.;
		*/

		if (sideInput < 0)
		{
			dir = DIR_Left;
			normalizedSideInput = -SideMove1;
		}
		else if (sideInput > 0)
		{
			dir = DIR_Right;
			normalizedSideInput = SideMove1;
		}

		// set the player's direction
		if (dir == DIR_Left) Angle = ANGLE_Left;
		else if (dir == DIR_Right) Angle = ANGLE_Right;

		if (sideInput != 0)
		{
			if (sideInput > 0) vx += PLAYER_ACCELERATE;
			else if (sideInput < 0) vx -= PLAYER_ACCELERATE;
			vx = Clamp(vx, -SideMove1, SideMove1);

		}
		else if (sideInput == 0)
		{
			vx *= PLAYER_DECELERATE;
		}

		// move the player
		Vel.X = vx;

		// JUMPING /////////////////////////////////////////////////////////////

		if ((GetPlayerInput(INPUT_BUTTONS) & BT_JUMP
			&& !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_JUMP))
			&& bIsOnFloor())
		{
			jumping = true;
		}

		if (jumping && !(GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) && !bIsOnFloor())
		{
			jumping = false;
			falling = true;
			j = 0;
		}

		if (jumping && j < PLAYER_JUMP_STRENGTH_MAX && !falling && Pos.Z < (CeilingZ - PLAYER_HEIGHT))
		{
			j += 1.0;
			Vel.Z = PLAYER_JUMP_STRENGTH;
		}
		else
		{
			jumping = false;
		}

		if (bIsOnFloor())
		{
			j = 0;
			falling = false;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		vx = 0;
		j = 0;
		//jumping = false;
		//falling = false;

		// make player face right by default
		dir = DIR_Right;

		Super.BeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();

		MoveSideScrollerPlayer();
		AnimateSideScrollerPlayer();
	}
}
