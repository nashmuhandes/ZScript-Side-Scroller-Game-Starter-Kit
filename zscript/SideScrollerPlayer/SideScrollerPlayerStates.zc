// Animation states for the player
enum EAnimationStates
{
	ANIMSTATE_SPAWN,
	ANIMSTATE_STAND,
	ANIMSTATE_WALKING,
	ANIMSTATE_JUMPING,
	ANIMSTATE_CROUCHING,
	TOTAL_PLAYER_STATES
}

// This is the actual player sprite that will be seen and animated in-game.
extend class SideScrollerPlayer
{
	const moveThreshold = 0.05;

	void AnimateSideScrollerPlayer(void)
	{
		// retrieve player information
		bool isOnfloor = OnFloor();
		double pSpeed = GetMoveSpeed();
		bool isCrouching = isCrouching;

		// set direction
		Scale.Y = spriteScale;
		if (dir == DIR_Left)
		{
			Scale.X = spriteScale;
		}
		else if (dir == DIR_Right)
		{
			Scale.X = -spriteScale;
		}

		////////////////////////////////////////////////////////////////////////
		//
		// STATES
		//
		////////////////////////////////////////////////////////////////////////
		int StateToPlay;
		StateLabel stateName[TOTAL_PLAYER_STATES];
		stateName[0] = "Spawn";
		stateName[1] = "Stand";
		stateName[2] = "Walking";
		stateName[3] = "Jumping";
		stateName[4] = "Crouching";

		// standing still
		if (isOnFloor && pSpeed <= moveThreshold)
		{
			StateToPlay = ANIMSTATE_STAND;
		}

		// walking
		if (isOnFloor && pSpeed > moveThreshold)
		{
			StateToPlay = ANIMSTATE_WALKING;
		}

		// jump
		if (!isOnFloor)
		{
			StateToPlay = ANIMSTATE_JUMPING;
		}

		// crouching
		if (isCrouching)
		{
			StateToPlay = ANIMSTATE_CROUCHING;
		}

		// set the new animation
		if (oldState != StateToPlay)
		{
			SetStateLabel(stateName[StateToPlay]);
			oldState = StateToPlay;
		}
	}

	States
	{
	Spawn:
	Stand:
		VKIL A -1;
		Loop;
	Walking:
		VKIL BCDA 6;
		Loop;
	Jumping:
		VKIL E -1;
		Loop;
	Crouching:
		VKIL F -1;
		Loop;
	}
}
