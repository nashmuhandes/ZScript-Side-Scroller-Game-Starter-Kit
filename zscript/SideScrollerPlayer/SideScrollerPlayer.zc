enum EDirection
{
	DIR_Left,
	DIR_Right
}

const ANGLE_Left = 180.;
const ANGLE_Right = 0.;

class SideScrollerPlayer : DoomPlayer
{
	// Player movement speed
	const PLAYER_MOVE_SPEED = 5.0;

	// How fast the player jumps
	const PLAYER_JUMP_STRENGTH = 8.0;

	// How high the player can jump, before starting to fall
	const PLAYER_JUMP_HEIGHT_MAX = 12;

	// Allow variable height jumping (0 to disable)
	const PLAYER_JUMP_VARIABLE = 1;

	// Player collision box height
	// (You can also set an absolute value for the crouch height)
	const PLAYER_HEIGHT = 56.0;
	const PLAYER_CROUCH_HEIGHT = PLAYER_HEIGHT / 2;

	// Player sprite scale (use a smaller number for high res sprites)
	const PLAYER_SPRITE_SCALE = 1.0;

	// Player's MaxStepHeight property
	const PLAYER_STEP_HEIGHT = 8;

	// Player movement tightness
	// Ranges from 0 to 1
	const PLAYER_ACCELERATE = 1.0;
	const PLAYER_DECELERATE = 0.1;

	Default
	{
		Player.SideMove PLAYER_MOVE_SPEED;
		SideScrollerPlayer.SpriteScale PLAYER_SPRITE_SCALE;
		Height PLAYER_HEIGHT;
		MaxStepHeight PLAYER_STEP_HEIGHT;
	}

	// camera actor
	SideScrollerCamera cam;

	// the player's direction
	bool dir;

	double vx;
	int jumpCounter;
	bool bIsJumping, bIsFalling;
	bool bIsCrouching;
	int oldState;
	double spriteScale;
	property SpriteScale: spriteScale;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	bool bIsOnFloor (void)
	{
		return Pos.Z == FloorZ || Vel.Z == 0 && bOnMObj;
	}

	double GetMoveSpeed (void)
	{
		return Vel.Length();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnCamera(void)
	{
		// spawn camera
		cam = SideScrollerCamera(Spawn("SideScrollerCamera", Pos, NO_REPLACE));

		if (cam)
		{
			// tell the camera to track this player
			cam.plr = self;

			// change view to the camera
			SetCamera(cam, false);
		}
		else
		{
			Console.Printf("WARNING: Failed to spawn the camera!");
		}
	}

	void DestroyCamera(void)
	{
		if (cam)
		{
			cam.Destroy();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		vx = 0;
		jumpCounter = 0;
		bIsJumping = false;
		bIsFalling = false;
		bIsCrouching = false;
		oldState = ANIMSTATE_SPAWN;

		// make player face right by default
		dir = DIR_Right;

		Super.BeginPlay();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void MovePlayer(void)
	{
		// call vanilla GZDoom player movement method
		Super.MovePlayer();

		// LEFT/RIGHT MOVEMENT /////////////////////////////////////////////////

		double sideInput = GetPlayerInput(INPUT_SIDEMOVE);
		double normalizedSideInput;

		/*
		// You can use the following formula for analog player movement
		// I have analog movement disabled on purpose
		double normalizedInput = SideMove1 * sideInput / 10240.;
		*/

		if (sideInput < 0)
		{
			dir = DIR_Left;
			normalizedSideInput = -SideMove1;
		}
		else if (sideInput > 0)
		{
			dir = DIR_Right;
			normalizedSideInput = SideMove1;
		}

		// set the player's direction
		if (dir == DIR_Left) Angle = ANGLE_Left;
		else if (dir == DIR_Right) Angle = ANGLE_Right;

		// apply X velocity
		if (sideInput != 0)
		{
			if (sideInput > 0) vx += PLAYER_ACCELERATE;
			else if (sideInput < 0) vx -= PLAYER_ACCELERATE;
			vx = Clamp(vx, -SideMove1, SideMove1);

		}
		else if (sideInput == 0)
		{
			vx *= PLAYER_DECELERATE;
		}

		if (bIsCrouching) vx = 0;

		// move the player
		Vel.X = vx;

		// JUMPING /////////////////////////////////////////////////////////////

		if ((GetPlayerInput(INPUT_BUTTONS) & BT_JUMP
			&& !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_JUMP))
			&& bIsOnFloor())
		{
			bIsJumping = true;
		}

		if (PLAYER_JUMP_VARIABLE == 1)
		{
			if (bIsJumping && !(GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) && !bIsOnFloor())
			{
				bIsJumping = false;
				bIsFalling = true;
			}
		}

		if (bIsJumping && jumpCounter < PLAYER_JUMP_HEIGHT_MAX && !bIsFalling && Pos.Z < (CeilingZ - PLAYER_HEIGHT))
		{
			jumpCounter++;
			Vel.Z = PLAYER_JUMP_STRENGTH;
		}
		else
		{
			bIsJumping = false;
		}

		if (bIsOnFloor() && !(GetPlayerInput(INPUT_BUTTONS) & BT_JUMP))
		{
			jumpCounter = 0;
			bIsFalling = false;
		}

		// CROUCHING ///////////////////////////////////////////////////////////

		double h;

		if (bIsOnFloor() && GetPlayerInput(INPUT_FORWARDMOVE) < 0)
		{
			bIsCrouching = true;
			h = PLAYER_CROUCH_HEIGHT;
		}
		else
		{
			bIsCrouching = false;
			h = PLAYER_HEIGHT;
		}

		// change the height box when crouching
		A_SetSize(Radius, h, false);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		// run player animation states
		AnimateSideScrollerPlayer();
	}
}
