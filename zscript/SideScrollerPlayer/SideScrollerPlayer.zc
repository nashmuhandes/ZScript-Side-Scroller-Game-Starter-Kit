enum EDirection
{
	DIR_Left,
	DIR_Right
}

const ANGLE_Left = 180.;
const ANGLE_Right = 0.;

class SideScrollerPlayer : PlayerPawn
{
	Default
	{
		// Basic PlayerPawn properties

		Height 56.0;
		MaxStepHeight 8;
		Player.DisplayName "Player";

		// Custom side scroller player properties

		// Player movement speed
		SideScrollerPlayer.MoveSpeed 5.0;

		// Player movement tightness
		// Lower number for tighter movement
		SideScrollerPlayer.MoveTightness 0.1;

		// Initial jump strength
		SideScrollerPlayer.JumpStrength 15.0;

		// Analog horizontal movement
		SideScrollerPlayer.AnalogMovement false;

		// Allow variable height jumping
		SideScrollerPlayer.VariableJumping true;

		// Player sprite scale. Use smaller numbers for higher resolution sprites
		SideScrollerPlayer.SpriteScale 1.0;
	}

	// Internal variables
	// Don't touch these unless you know what you're doing!
	SideScrollerCamera cam;
	bool dir;
	double vx;
	bool isJumping, isFalling;
	bool isCrouching;
	int oldState;
	double moveSpeed;
	double moveTightness;
	double jumpStrength;
	bool analogMove;
	bool variableJumping;
	double spriteScale;

	// Exposed properties
	property MoveSpeed: moveSpeed;
	property MoveTightness: moveTightness;
	property AnalogMovement: analogMove;
	property JumpStrength: jumpStrength;
	property VariableJumping: variableJumping;
	property SpriteScale: spriteScale;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	// Check if player is on the floor
	bool OnFloor(void)
	{
		return (Pos.Z <= FloorZ) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);
	}

	// Get the player's movement speed
	double GetMoveSpeed(void)
	{
		return Vel.Length();
	}

	// Determine crouching height for collision purposes
	double GetCrouchHeight(void)
	{
		return Default.Height / 2;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SpawnCamera(void)
	{
		// spawn camera
		cam = SideScrollerCamera(Spawn("SideScrollerCamera", Pos, NO_REPLACE));

		if (cam)
		{
			// tell the camera to track this player
			cam.plr = self;

			// change view to the camera
			SetCamera(cam, false);
		}
		else
		{
			Console.Printf("WARNING: Failed to spawn the camera!");
		}
	}

	void DestroyCamera(void)
	{
		if (cam)
		{
			cam.Destroy();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		vx = 0;
		isJumping = false;
		isFalling = false;
		isCrouching = false;
		oldState = ANIMSTATE_SPAWN;

		// make player face right by default
		dir = DIR_Right;

		Super.BeginPlay();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void MovePlayer(void)
	{
		let player = self.player;
		UserCmd cmd = player.cmd;

		// disable GZDoom's native crouching
		player.Uncrouch();

		if (OnFloor())
		{
			isJumping = isFalling = false;
		}

		// LEFT/RIGHT MOVEMENT /////////////////////////////////////////////////

		double sideInput = GetPlayerInput(INPUT_SIDEMOVE);
		double normalizedSideInput;

		if (sideInput < 0)
		{
			dir = DIR_Left;
			normalizedSideInput = -moveSpeed;
		}
		else if (sideInput > 0)
		{
			dir = DIR_Right;
			normalizedSideInput = moveSpeed;
		}

		// apply analog movement
		if (analogMove)
		{
			normalizedSideInput = moveSpeed * sideInput / 10240.;
		}

		// set the player's direction
		if (dir == DIR_Left) Angle = ANGLE_Left;
		else if (dir == DIR_Right) Angle = ANGLE_Right;

		// apply X velocity
		if (sideInput != 0)
		{
			vx = normalizedSideInput;
		}
		else if (sideInput ~== 0)
		{
			vx *= moveTightness;
		}

		if (isCrouching) vx = 0;

		// move the player horizontally
		Vel.X = vx;

		// JUMPING /////////////////////////////////////////////////////////////

		if ((GetPlayerInput(INPUT_BUTTONS) & BT_JUMP
			&& !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_JUMP))
			&& OnFloor())
		{
			Vel.Z = jumpStrength;
			isJumping = true;
		}

		if (isJumping)
		{
			// variable jumping
			// cancel jump motion if button is let go
			if (variableJumping && !(GetPlayerInput(INPUT_BUTTONS) & BT_JUMP))
			{
				Vel.Z *= 0.5;
			}

			// no more upwards movement, proceed to falling
			if (Vel.Z < 0.001)
			{
				isJumping = false;
				isFalling = true;
			}
		}

		// CROUCHING ///////////////////////////////////////////////////////////

		double h;

		if (OnFloor() && GetPlayerInput(INPUT_FORWARDMOVE) < 0)
		{
			isCrouching = true;
			h = GetCrouchHeight();
		}
		else
		{
			isCrouching = false;
			h = Default.Height;
		}

		// set height collision box
		A_SetSize(Radius, h, false);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		// run player animation states
		AnimateSideScrollerPlayer();
	}
}
